{
  "$schema": "https://svrooij.io/sonos-api-docs/schema/documentation.json",
  "language": "EN",
  "license": "MIT",
  "services": {
    "AlarmClockService": {
      "description": "Control the sonos alarms. Service name:'AlarmClock', Endpoint: '/AlarmClock/Control' ",
      "actions": {
        "CreateAlarm": {
          "description": "Create a single alarm, all properties are required",
          "params": {
            "StartLocalTime": "The start time as hh:mm:ss",
            "Duration": "The duration as hh:mm:ss",
            "Recurrence": "Repeat this alarm on",
            "Enabled": "Alarm enabled after creation",
            "RoomUUID": "The UUID of the speaker you want this alarm for",
            "ProgramURI": "The sound uri",
            "ProgramMetaData": "The sound metadata, can be empty string",
            "PlayMode": "Alarm play mode",
            "Volume": "Volume between 0 and 100",
            "IncludeLinkedZones": "Should grouped players also play the alarm?"
          }
        },
        "DestroyAlarm": {
          "description": "Delete an alarm",
          "params": {
            "ID": "The Alarm ID from ListAlarms"
          }
        },
        "ListAlarms": {
          "description": "Get the AlarmList as XML",
          "params": {
            "CurrentAlarmList": "xml string, see remarks"
          },
          "remarks": "Some libraries also provide a ListAndParseAlarms where the alarm list xml is parsed"
        },
        "UpdateAlarm": {
          "description": "Update an alarm, all parameters are required.",
          "params": {
            "ID": "The ID of the alarm see ListAndParseAlarms",
            "StartLocalTime": "The start time as hh:mm:ss",
            "Duration": "The duration as hh:mm:ss",
            "Recurrence": "Repeat this alarm on",
            "Enabled": "Alarm enabled after creation",
            "RoomUUID": "The UUID of the speaker you want this alarm for",
            "ProgramURI": "The sound uri",
            "ProgramMetaData": "The sound metadata, can be empty string",
            "PlayMode": "Alarm play mode",
            "Volume": "Volume between 0 and 100",
            "IncludeLinkedZones": "Should grouped players also play the alarm?"
          },
          "remarks": "Some libraries support PatchAlarm where you can update a single parameter"
        }
      },
      "errors": [{ "code": 801, "description": "Duplicate alarm time" }]
    },
    "AudioInService": {
      "description": "Service that control the line in. Service name:'AudioIn', Endpoint: '/AudioIn/Control')"
    },
    "AVTransportService": {
      "description": "Service that controls stuff related to transport (play/pause/next/special urls). Service name: 'AVTransport', Endpoint: '/MediaRenderer/AVTransport/Control'",
      "actions": {
        "AddURIToQueue": {
          "description": "Adds songs to the SONOS queue. In NORMAL play mode the songs are added prior to the specified 'DesiredFirstTrackNumberEnqueued'.",
          "remarks": "Use 0 as 'DesiredFirstTrackNumberEnqueued' to insert at the end, 1 to insert at the beginning",
          "params": {
            "DesiredFirstTrackNumberEnqueued": "use 0 to add at the end"
          }
        },
        "BecomeCoordinatorOfStandaloneGroup": {
          "description": "Leave the current group and revert to a single player."
        },
        "ConfigureSleepTimer": {
          "description": "Stop playing after set sleep timer or cancel",
          "remarks":"Send to non-coordinator returns error code 800",
          "params": {
            "NewSleepTimerDuration": "Time to stop after, as hh:mm:ss or empty string to cancel"
          }
        },
        "DelegateGroupCoordinationTo": {
          "description": "Delegates the coordinator role to another player in the same group",
          "remarks":"Send to non-coordinator has no results - should be avoided.",
          "params": {
            "NewCoordinator": "uuid of the new coordinator - must be in same group",
            "RejoinGroup": "Should former coordinator rejoin the group?"
          }
        },
        "GetCrossfadeMode": {
          "description": "Get crossfade mode",
          "remarks":"Send to non-coordinator may return wrong value as only the coordinator value in a group"
        },
        "GetCurrentTransportActions": {
          "description": "Get current transport actions such as Set, Stop, Pause, Play, X_DLNA_SeekTime, Next, X_DLNA_SeekTrackNr",
          "remarks":"Send to non-coordinator returns invalid value."
        },
        "GetMediaInfo": {
          "description": "Get information about the current playing media (queue)"
        },
        "GetPositionInfo": {
          "description": "Get information about current position (position in queue and time in current song)"
        },
        "GetRemainingSleepTimerDuration": {
          "description": "Get time left on sleeptimer.",
          "remarks":"Send to non-coordinator returns error code 800",
          "params": {
            "RemainingSleepTimerDuration": "Format hh:mm:ss or empty string if not set"
          }
        },
        "GetTransportInfo": {
          "description": "Get current transport status, speed and state such as PLAYING, STOPPED, PLAYING, PAUSED_PLAYBACK, TRANSITIONING, NO_MEDIA_PRESENT",
          "remarks":"Send to non-coordinator always returns PLAYING"
        },
        "GetTransportSettings": {
          "description": "Get transport settings",
          "remarks":"Send to non-coordinator returns the settings of it's queue"
        },
        "Next": {
          "description": "Go to next song, not always supported - see GetCurrentTransportActions"
        },
        "Pause": {
          "description": "Pause playback"
        },
        "Play": {
          "description": "Start playing the set TransportURI",
          "params": {
            "Speed": "Play speed usually 1, can be a fraction of 1"
          }
        },
        "Previous": {
          "description": "Go to previous song, not always supported - GetCurrentTransportActions"
        },
        "RemoveAllTracksFromQueue": {
          "description": "Flushes the SONOS queue. If queue is already empty it throw error 804",
          "remarks":"Send to non-coordinator returns error code 800."
        },
        "RemoveTrackRangeFromQueue": {
          "description": "Removes the specified range of songs from the SONOS queue.",
          "remarks": "Use 0 as 'DesiredFirstTrackNumberEnqueued' to insert at the end, 1 to insert at the beginning",
          "params": {
            "UpdateID": "Leave blank",
            "StartingIndex": "between 1 and queue-length"
          }
        },
        "SaveQueue": {
          "description": "Saves the current SONOS queue as a SONOS playlist and outputs objectID",
          "remarks":"Send to non-coordinator returns error code 800",
          "params": {
            "Title": "SONOS playlist title", 
            "ObjectID": "Leave blank"
          }
        },
        "Seek": {
          "description": "Seek track in queue, time delta or absolute time in song, not always supported - see GetCurrentTransportActions",
          "remarks":"Returns error code 701 in case that content does not support Seek or send to non-coordinator",
          "params": {
            "Unit": "What to seek. ",
            "Target": "Position of track in queue (start at 1) or hh:mm:ss for REL_TIME or +/-hh:mm:ss for TIME_DELTA"
          }
        },
        "SetAVTransportURI": {
          "description": "Set the transport URI to a song, a stream, the queue, another player-rincon and a lot more",
          "remarks":"If set to another player RINCON, the player is grouped with that one.",
          "params": {
            "CurrentURI": "The new TransportURI - its a special SONOS format",
            "CurrentURIMetaData": "Track Metadata, see MetadataHelper.GuessTrack to guess based on track uri"
          }
        },
        "SetCrossfadeMode": {
          "description": "Set crossfade mode",
          "remarks":"Send to non-coordinator returns error code 800. Same for content, which does not support crossfade mode."
        },
        "SetPlayMode": {
          "description": "Set the PlayMode",
          "remarks":"Send to non-coordinator returns error code 712. If SONOS queue is not activated returns error code 712.",
          "params": {
            "NewPlayMode": "New playmode"
          }
        },
        "SnoozeAlarm": {
          "description": "Snooze the current alarm for some time.",
          "params": {
            "Duration": "Snooze time as hh:mm:ss, 10 minutes = 00:10:00"
          }
        },
        "Stop": {
          "description": "Stop playback"
        }
      },
      "errors": [
        { "code": 701, "description": "Transition not available" },
        { "code": 702, "description": "No content" },
        { "code": 703, "description": "Read error" },
        { "code": 704, "description": "Format not supported for playback" },
        { "code": 705, "description": "Transport is locked" },
        { "code": 706, "description": "Write error" },
        { "code": 707, "description": "Media protected or not writeable" },
        { "code": 708, "description": "Format not supported for recording" },
        { "code": 709, "description": "Media is full" },
        { "code": 710, "description": "Seek mode not supported" },
        { "code": 711, "description": "Illegal seek target" },
        { "code": 712, "description": "Play mode not supported" },
        { "code": 713, "description": "Record quality not supported" },
        { "code": 714, "description": "Illegal MIME-Type" },
        { "code": 715, "description": "Content busy" },
        { "code": 716, "description": "Resource not found" },
        { "code": 717, "description": "Play speed not supported" },
        { "code": 718, "description": "Invalid InstanceID" },
        { "code": 737, "description": "No dns configured" },
        { "code": 738, "description": "Bad domain" },
        { "code": 739, "description": "Server error" }
      ]
    },
    "ConnectionManagerService": {
      "description": "Services related to connections and protocols. Service name:'ConnectionManager',  Endpoint: '/MediaRenderer/ConnectionManager/Control' and '/MediaServer/ConnectionManager/Control'"
    },
    "ContentDirectoryService": {
      "description": "Browse for local content. Service name:'ContentDirectory', Endpoint: '/MediaServer/ContentDirectory/Control'",
      "actions": {
        "Browse": {
          "description": "Browse for content. Recommendation: Send one request, check the 'TotalMatches' and - if necessary - do additional requests with higher 'StartingIndex'. In case of duplicates only the first is returned! Example: albums with same title, even if artists are different",
          "params": {
            "ObjectID": "The search query, ['A:ARTIST','A:ALBUMARTIST','A:ALBUM','A:GENRE','A:COMPOSER','A:TRACKS','A:PLAYLISTS'] with optionally ':search+query' behind it.",
            "BrowseFlag": "How to browse",
            "Filter": "Which fields should be returned '*' for all.",
            "StartingIndex": "Paging, where to start",
            "RequestedCount": "Paging, number of items, maximum is 1,000. This parameter does restrict the number of items being searched (filter) but only the number being returned. ",
            "SortCriteria": "Sort the results based on metadata fields. '+upnp:artist,+dc:title' for sorting on artist then on title.",
            "Result": "Encoded DIDL-Lite XML. See remark (2)"
          },
          "remarks": "(1) If the title contains an apostrophe the returned uri will contain a '&apos;'. (2) Some libraries support a BrowseAndParse, so you don't have to parse the xml."
        }
      },
      "errors": [
        { "code": 701, "description": "No such object" },
        { "code": 702, "description": "Invalid CurrentTagValue" },
        { "code": 703, "description": "Invalid NewTagValue" },
        { "code": 704, "description": "Required tag" },
        { "code": 705, "description": "Read-only tag" },
        { "code": 706, "description": "Parameter mismatch" },
        { "code": 708, "description": "Invalid search criteria" },
        { "code": 709, "description": "Invalid sort criteria" },
        { "code": 710, "description": "No such container" },
        { "code": 711, "description": "Restricted object" },
        { "code": 712, "description": "Bad metadata" },
        { "code": 713, "description": "Restricted parent object" },
        { "code": 714, "description": "No such source resource" },
        { "code": 715, "description": "Resource access denied" },
        { "code": 716, "description": "Transfer busy" },
        { "code": 717, "description": "No such file transfer" },
        { "code": 718, "description": "No such destination resource" },
        { "code": 719, "description": "Destination resource access denied" },
        { "code": 720, "description": "Cannot process the request" }
      ]
    },
    "DevicePropertiesService": {
      "description": "Modify device properties, like LED status and stereo pairs. Service name:'DeviceProperties', Endpoint: '/DeviceProperties/Control'",
      "actions": {
        "GetButtonLockState": {
          "description": "Get the current button lock state - On or Off (case sensitive)"
        },
        "GetLEDState": {
          "description": "Get the current LED state - On or Off (case sensitive)"
        },
        "CreateStereoPair": {
          "description": "Create a stereo pair (left, right speakers), right one becomes hidden",
          "params": {
            "ChannelMapSet": "example: RINCON_B8E9375831C001400:LF,LF;RINCON_000E58FE3AEA01400:RF,RF"
          },
          "remarks": "No all speakers support StereoPairs"
        },
        "SeparateStereoPair": {
          "description": "Separate a stereo pair",
          "params": {
            "ChannelMapSet": "example: RINCON_B8E9375831C001400:LF,LF;RINCON_000E58FE3AEA01400:RF,RF"
          },
          "remarks": "No all speakers support StereoPairs"
        },
        "SetButtonLockState": {
          "description": "Set the button lock state - On or Off (case sensitive)"
        },
        "SetLEDState": {
          "description": "Set the LED state - On or Off (case sensitive)"
        }
      }
    },
    "GroupManagementService": {
      "description": "Services related to groups. Service name:'GroupManagement', Endpoint: '/GroupManagement/Control'"
    },
    "GroupRenderingControlService": {
      "description": "Volume related controls for groups. Group volume is the average volume of all players. Snapshot stores the volume ratio between players. Service name:'GroupRenderingControl',  Endpoint: '/MediaRenderer/GroupRenderingControl/Control' ",
      "actions": {
        "GetGroupMute": {
          "description": "Get the group mute state.",
          "remarks": "Should be send to coordinator only"
        },
        "GetGroupVolume": {
          "description": "Get the group volume.",
          "remarks": "Should be send to coordinator only"
        },
        "SetGroupMute": {
          "description": "(Un-/)Mute the entire group",
          "remarks": "Should be send to coordinator only",
          "params": {
            "DesiredMute": "True for mute, false for un-mute"
          }
        },
        "SetGroupVolume": {
          "description": "Change group volume. Players volume will be changed proportionally based on last snapshot",
          "remarks": "Should be send to coordinator only",
          "params": {
            "DesiredVolume": "New volume between 0 and 100"
          }
        },
        "SetRelativeGroupVolume": {
          "description": "Relatively change group volume - returns final group volume. Players volume will be changed proportionally based on last snapshot",
          "remarks": "Should be send to coordinator only",
          "params": {
            "Adjustment": "Number between -100 and +100"
          }
        }, 
        "SnapshotGroupVolume": {
          "description": "Creates a new group volume snapshot,  the volume ratio between all players. It is used by SetGroupVolume and SetRelativeGroupVolume",
          "remarks": "Should be send to coordinator only"
        }
      },
      "errors": [
        { "code": 701, "description": "Player isn't the coordinator" }
      ]
    },
    "HTControlService": {
      "description": "Service related to the TV remote control. Service name:'HTControl', Endpoint: '/HTControl/Control'"
    },
    "MusicServicesService": {
      "description": "External music services. Service name:'MusicServices', Endpoint: '/MusicServices/Control'",
      "actions": {
        "ListAvailableServices": {
          "description": "Load music service list as xml",
          "remarks": "Some libraries also support ListAndParseAvailableServices"
        }
      }
    },
    "QueueService": {
      "description": "Modify and browse queues. Service name:'Queue', Endpoint: '/MediaRenderer/Queue/Control'"
    },
    "QPlayService": {
      "description": "Services related to Chinese Tencent Qplay service. Service name:'QPlay', Endpoint: '/QPlay/Control'"
    },
    "RenderingControlService": {
      "description": "Volume related controls. Service name:'RenderingControl', Endpoint: '/MediaRenderer/RenderingControl/Control'",
      "actions": {
        "GetBass": {
          "description": "Get bass level between -10 and 10"
        },
        "GetEQ": {
          "description": "Get EQ value (see SetEQ) for different EQTypes. 'Subgain' between -10 and 10",
          "params": {
            "EQType": "EQ type such as 'DialogLevel', 'NightMode', 'SubGain'"
          },
          "remarks": "Not supported by all speakers, TV related"
        },
        "GetLoudness": {
          "description": "Whether or not Loudness is on",
          "params": {
            "Channel": "Master"
          }
        },
        "GetTreble": {
          "description": "Get treble, between -10 and 10"
        },
        "GetVolume": {
          "description": "Get volume, between 0 and 100",
          "params": {
            "Channel": "Master"
          }
        },
        "SetBass": {
          "description": "Set bass level, between -10 and 10"
        },
        "SetEQ": {
          "description": "Set EQ value for different types",
          "params": {
            "EQType": "DialogLevel, NightMode, SubGain",
            "DesiredValue": "SubGain between -10 and 10"
          },
          "remarks": "Not supported by all speakers, TV related"
        },
        "SetLoudness": {
          "description": "Set loudness on / off"
        },
        "SetTreble": {
          "description": "Set treble level",
          "params": {
            "DesiredTreble": "between -10 and 10"
          }
        }
      }
    },
    "SystemPropertiesService": {
      "description": "Manage system-wide settings, mainly account stuff. Service name:'SystemProperties', Endpoint: '/SystemProperties/Control'",
      "actions": {
        "GetString": {
          "description": "Get a saved string.",
          "params": {
            "VariableName": "The key for this variable"
          },
          "remarks": "Strings are saved in the system with SetString, every speaker should send the same data. Will error when not existing"
        },
        "Remove": {
          "description": "Remove a saved string",
          "params": {
            "VariableName": "The key for this variable"
          },
          "remarks": "Not sure what happens if you call this with a VariableName that doesn't exists."
        },
        "SetString": {
          "description": "Save a string in the system",
          "params": {
            "VariableName": "The key for this variable, use something unique"
          },
          "remarks": "Strings are saved in the system, retrieve values with GetString."
        }
      }
    },
    "VirtualLineInService": {
      "description": "Service name:'VirtualLineIn', Endpoint: '/MediaRenderer/VirtualLineIn/Control'"
    },
    "ZoneGroupTopologyService": {
      "description": "Zone config stuff, eg getting all the configured sonos zones. Service name:'ZoneGroupTopology', Endpoint: '/ZoneGroupTopology/Control'",
      "actions": {
        "GetZoneGroupAttributes": {
          "description": "Get information about the current Zone"
        },
        "GetZoneGroupState": {
          "description": "Get all the Sonos groups, (as XML)",
          "params": {
            "ZoneGroupState": "xml string, see remarks"
          },
          "remarks": "Some libraries also support GetParsedZoneGroupState that parses the xml for you."
        }
      }
    }
  },
  "errors": [
    { "code": 400, "description": "Bad request" },
    { "code": 401, "description": "Invalid action" },
    { "code": 402, "description": "Invalid args" },
    { "code": 404, "description": "Invalid var" },
    { "code": 412, "description": "Precondition failed" },
    { "code": 501, "description": "Action failed" },
    { "code": 600, "description": "Argument value invalid" },
    { "code": 601, "description": "Argument value out of range" },
    { "code": 602, "description": "Optional action not implemented" },
    { "code": 603, "description": "Out of memory" },
    { "code": 604, "description": "Human intervention required" },
    { "code": 605, "description": "String argument too long" },
    { "code": 606, "description": "Action not authorized" },
    { "code": 607, "description": "Signature failure" },
    { "code": 608, "description": "Signature missing" },
    { "code": 609, "description": "Not encrypted" },
    { "code": 610, "description": "Invalid sequence" },
    { "code": 611, "description": "Invalid control URL" },
    { "code": 612, "description": "No such session" }
  ]
}
