/**
 * Sonos {{serviceName}}
 * 
 * Stephan van Rooij
 * https://svrooij.io
 *
 * This file is generated, do not edit manually. https://svrooij.io/sonos-api-docs
 */
import BaseService from './base-service';
{{#if data.importArrayHelper}}
import ArrayHelper from '../helpers/array-helper';
{{/if}}
{{#if data.importMetadataHelper}}
import MetadataHelper from '../helpers/metadata-helper';
{{/if}}
{{#if data.importUrl}}
import { URL } from 'url';
{{/if}}
{{#if data.importXmlHelper}}
import XmlHelper from '../helpers/xml-helper';
{{/if}}
{{#if data.imports}}
import { {{#each data.imports}}{{this}}{{#unless @last}}, {{/unless}}{{/each}} } from '../models';
{{/if}}

{{#if description}}
/**
 * {{description}}
 *
 * @export
 * @class {{serviceName}}{{#if data.extended}}Base{{/if}}
 * @extends {BaseService}
 */
{{/if}}
export class {{serviceName}}{{#if data.extended}}Base{{/if}} extends BaseService{{#if eventVariables}}<{{serviceName}}Event>{{else}}<undefined>{{/if}} {
  readonly serviceNane: string = '{{name}}';

  readonly controlUrl: string = '{{controlURL}}';

  readonly eventSubUrl: string = '{{eventSubURL}}';

  readonly scpUrl: string = '{{discoveryUri}}';

  // #region actions
  {{#each actions}}
  {{#if description}}
  /**
   * {{description}}
  {{#if inputs}}
   *
  {{/if}}
  {{#each inputs}}
   * @param { {{~ relatedStateVariable.dataType ~}} } input.{{name}}{{#if description}} - {{{description}}}{{/if}}{{#if relatedStateVariable.allowedValues}} [ {{#each relatedStateVariable.allowedValues}}'{{this}}'{{#unless @last}} / {{/unless}}{{/each}} ]{{/if}}
  {{/each}}
  {{#if remarks}}
   * @remarks {{{remarks}}}
  {{/if}}
   */
  {{/if}}
  {{#if inputs}}
  async {{name}}(input: { {{#each inputs}}{{name}}: {{relatedStateVariable.dataType}}{{#unless @last}}; {{/unless}}{{/each}} }{{{sonos_if_only_instance_id inputs ' = { InstanceID: 0 }'}}}):
  {{#if outputs}}
  Promise<{{name}}Response> { return await this.SoapRequestWithBody<typeof input, {{name}}Response>('{{name}}', input); }
  {{else}}
  Promise<boolean> { return await this.SoapRequestWithBodyNoResponse<typeof input>('{{name}}', input); }
  {{/if}}
  {{else}}
  async {{name}}():
  {{#if outputs}}
  Promise<{{name}}Response> { return await this.SoapRequest<{{name}}Response>('{{name}}'); }
  {{else}}
  Promise<boolean> { return await this.SoapRequestNoResponse('{{name}}'); }
  {{/if}}
  {{/if}}
  {{#unless @last}}

  {{/unless}}
  {{/each}}
  // #endregion
  {{#if eventVariables}}

  // Event properties from service description.
  protected eventProperties(): {[key: string]: string} {
    return {
    {{#each eventVariables}}
      {{name}}: '{{#if (or (are_equal name 'Volume') (are_equal name 'Mute'))}}{{#if (are_equal name 'Mute')}}ChannelValue<boolean>{{else}}ChannelValue<number>{{/if}}{{else}}{{{dataType}}}{{/if}}',
    {{/each}}
    };
  }
  {{else}}

  // No properties in service description, throw error on retrieval.
  protected eventProperties(): {[key: string]: string} {
    throw new Error('No event properties in service definition');
  }
  {{/if}}
}

// Generated responses
{{#each actions}}
{{#if outputs}}
{{#unless (are_equal name 'Browse')}}
export interface {{name}}Response {
  {{#each outputs}}
  {{name}}: {{{relatedStateVariable.dataType}}};
  {{/each}}
}

{{/unless}}
{{/if}}
{{/each}}
{{#if eventVariables}}
// Strong type event
export interface {{serviceName}}Event {
  {{#each eventVariables}}
  {{name}}?: {{#if (or (are_equal name 'Volume') (are_equal name 'Mute'))}}{{#if (are_equal name 'Mute')}}ChannelValue<boolean>{{else}}ChannelValue<number>{{/if}}{{else}}{{{dataType}}}{{/if}};
  {{/each}}
}
{{/if}}
{{#if data.extended}}

{{#if (are_equal serviceName 'AlarmClockService')}}
/**
 * Extended AlarmClockService
 *
 * @export
 * @class AlarmClockService
 * @extends {AlarmClockServiceBase}
 */
export class AlarmClockService extends AlarmClockServiceBase {
  /**
   * Get a parsed list of all alarms.
   *
   * @returns {Promise<Alarm[]>}
   * @memberof SonosDevice
   */
  public async ListAndParseAlarms(): Promise<Alarm[]> {
    const alarmList = await super.ListAlarms();
    const parsedList = XmlHelper.DecodeAndParseXml(alarmList.CurrentAlarmList, '');
    const alarms = ArrayHelper.ForceArray<any>(parsedList.Alarms.Alarm);
    const results: Array<Alarm> = [];
    alarms.forEach((alarm: any) => {
      results.push({
        Duration: alarm.Duration,
        Enabled: alarm.Enabled === '1',
        ID: parseInt(alarm.ID, 10),
        IncludeLinkedZones: alarm.IncludeLinkedZones === '1',
        PlayMode: alarm.PlayMode,
        ProgramMetaData: MetadataHelper.ParseDIDLTrack(XmlHelper.DecodeAndParseXml(alarm.ProgramMetaData), this.host, this.port),
        ProgramURI: XmlHelper.DecodeTrackUri(alarm.ProgramURI),
        Recurrence: alarm.Recurrence,
        RoomUUID: alarm.RoomUUID,
        StartLocalTime: alarm.StartTime,
        Volume: parseInt(alarm.Volume, 10),
      } as Alarm);
    });
    return results;
  }

  /**
   * Patch a single alarm. Only the ID and one property you want to change are required.
   *
   * @param {PatchAlarm} [options]
   * @param {number} options.ID The ID of the alarm to update
   * @param {string | undefined} options.StartLocalTime The time the alarm has to start 'hh:mm:ss'
   * @param {string | undefined} options.Duration The duration of the alarm 'hh:mm:ss'
   * @param {string | undefined} options.Recurrence What should the recurrence be ['DAILY','ONCE','WEEKDAYS']
   * @param {boolean | undefined} options.Enabled Should this alarm be enabled
   * @param {PlayMode | undefined} options.PlayMode What playmode should be used
   * @param {number | undefined} options.Volume The requested alarm volume
   * @returns {Promise<boolean>}
   * @memberof SonosDevice
   */
  public async PatchAlarm(options: PatchAlarm): Promise<boolean> {
    this.debug('AlarmPatch(%o)', options);
    const alarms = await this.ListAndParseAlarms();
    const alarm = alarms.find((a: any) => a.ID === options.ID);
    if (alarm === undefined) {
      throw new Error(`Alarm with ID ${options.ID} not found`);
    }
    if (options.Duration !== undefined) alarm.Duration = options.Duration;
    if (options.Enabled !== undefined) alarm.Enabled = options.Enabled;
    if (options.PlayMode !== undefined) alarm.PlayMode = options.PlayMode;
    if (options.Recurrence !== undefined) alarm.Recurrence = options.Recurrence;
    if (options.StartLocalTime !== undefined) alarm.StartLocalTime = options.StartLocalTime;
    if (options.Volume !== undefined) alarm.Volume = options.Volume;

    return await this.UpdateAlarm(alarm);
  }
}
{{/if}}
{{#if (are_equal serviceName 'ContentDirectoryService')}}
/**
 * Browse for local content
 *
 * @export
 * @class ContentDirectoryService
 * @extends {ContentDirectoryServiceBase}
 */
export class ContentDirectoryService extends ContentDirectoryServiceBase {
  /**
   * Browse or search content directory
   *
   * @param {string} input.ObjectID The search query, ['A:ARTIST','A:ALBUMARTIST','A:ALBUM','A:GENRE','A:COMPOSER','A:TRACKS','A:PLAYLISTS'] with optionally ':search+query' behind it.
   * @param {string} input.BrowseFlag How to browse [ BrowseMetadata,BrowseDirectChildren ]
   * @param {string} input.Filter Which fields should be returned '*' for all.
   * @param {number} input.StartingIndex Where to start in the results, (could be used for paging)
   * @param {number} input.RequestedCount How many items should be returned, 0 for all.
   * @param {string} input.SortCriteria Sort the results based on metadata fields. '+upnp:artist,+dc:title' for sorting on artist then on title.
   * @returns {Promise<BrowseResponse>}
   * @memberof ContentDirectoryService
   * @see http://www.upnp.org/specs/av/UPnP-av-ContentDirectory-v1-Service.pdf
   */
  async BrowseParsed(input: { ObjectID: string; BrowseFlag: string; Filter: string; StartingIndex: number; RequestedCount: number; SortCriteria: string }): Promise<BrowseResponse> {
    const resp = await this.Browse(input);
    if (typeof resp.Result === 'string' && resp.NumberReturned > 0) {
      const parsedData = XmlHelper.DecodeAndParseXml(resp.Result)['DIDL-Lite'];
      const itemObject = parsedData.item || parsedData.container;
      const items = ArrayHelper.ForceArray(itemObject);
      resp.Result = items.map((i: any) => MetadataHelper.ParseDIDLTrack(i, this.host, this.port));
    }
    return resp;
  }

  /**
   * Same as BrowseParsed but with all parameters set to default.
   *
   * @param {string} ObjectID The search query, ['A:ARTIST','A:ALBUMARTIST','A:ALBUM','A:GENRE','A:COMPOSER','A:TRACKS','A:PLAYLISTS'] with optionally ':search+query' behind it.
   * @returns {Promise<BrowseResponse>}
   * @memberof SonosDevice
   */
  public async BrowseParsedWithDefaults(ObjectID: string): Promise<BrowseResponse> {
    return await this.BrowseParsed({
      ObjectID, BrowseFlag: 'BrowseDirectChildren', Filter: '*', StartingIndex: 0, RequestedCount: 0, SortCriteria: '',
    });
  }
}
{{/if}}
{{#if (are_equal serviceName 'MusicServicesService')}}
export interface MusicService {
  Capabilities: string;
  ContainerType: string;
  Id: number;
  Manifest: { Uri: string; Version: string };
  Name: string;
  Policy: { Auth: string; PollInterval?: number };
  Presentation?: { Strings?: { Uri: string; Version: string }; PresentationMap?: { Uri: string; Version: string }};
  SecureUri: string;
  Uri: string;
  Version: string;
}

export class MusicServicesService extends MusicServicesServiceBase {
  private musicServices?: Array<MusicService>;

  /**
   * A parsed version of ListAvailableServices
   *
   * @param {boolean} [cache=false] Should the list be fetched once and then kept in memory?
   * @returns {Promise<Array<MusicService>>} All available music services (not only subscribed ones).
   * @memberof MusicServicesService
   */
  public async ListAndParseAvailableServices(cache = false): Promise<Array<MusicService>> {
    if (cache === true && this.musicServices !== undefined) {
      return this.musicServices;
    }
    const encodedResponse = await this.ListAvailableServices();
    const raw = XmlHelper.DecodeAndParseXml(encodedResponse.AvailableServiceDescriptorList, '');
    const result = ArrayHelper.ForceArray(raw.Services.Service)
      .map((service) => MusicServicesService.ParseMusicService(service))
      .sort((a, b) => a.Name.localeCompare(b.Name));

    if (cache === true) {
      this.musicServices = result;
    }
    return result;
  }

  private static ParseMusicService(service: any): MusicService {
    const temp = service;
    const result = {
      Id: parseInt(service.Id, 10),
      Policy: {
        Auth: service.Policy?.Auth,
        PollInterval: parseInt(service?.Policy?.PollInterval || '-1', 10),
      },
    };
    delete temp.Id;
    delete temp.Policy;
    return { ...temp, ...result } as MusicService;
  }
}
{{/if}}
{{#if (are_equal serviceName 'RenderingControlService')}}
export class RenderingControlService extends RenderingControlServiceBase {
  protected ResolveEventPropertyValue(name: string, originalValue: any, type: string): any {
    if (name === 'Mute') {
      const output = {} as ChannelValue<boolean>;
      (originalValue as Array<any>).forEach((v) => {
        output[v.channel] = v.val === '1';
      });
      return output;
    }

    if (name === 'Volume') {
      const output = {} as ChannelValue<number>;
      (originalValue as Array<any>).forEach((v) => {
        output[v.channel] = parseInt(v.val, 10);
      });
      return output;
    }
    return super.ResolveEventPropertyValue(name, originalValue, type);
  }
}
{{/if}}
{{#if (are_equal serviceName 'ZoneGroupTopologyService')}}

export interface ZoneGroup {
  name: string;
  coordinator: ZoneMember;
  members: ZoneMember[];
}

interface ZoneMember {
  host: string;
  port: number;
  uuid: string;
  name: string;
  Icon: string;
  MicEnabled: boolean;
  SoftwareVersion: string;
  SwGen: string;
}

/**
 * Zone config stuff, eg getting all the configured sonos zones.
 *
 * @export
 * @class ZoneGroupTopologyService
 * @extends {ZoneGroupTopologyServiceBase}
 */
export class ZoneGroupTopologyService extends ZoneGroupTopologyServiceBase {
  /**
   * Get all the sonos groups in your current network. Parsed the GetZoneGroupState output.
   *
   * @returns {Promise<ZoneGroup[]>}
   * @memberof ZoneGroupTopologyService
   */
  async GetParsedZoneGroupState(): Promise<ZoneGroup[]> {
    const groupStateResponse = await this.GetZoneGroupState();
    if(typeof groupStateResponse.ZoneGroupState === 'string') {
      const decodedGroupState = XmlHelper.DecodeAndParseXml(groupStateResponse.ZoneGroupState, '');
      const groups = ArrayHelper.ForceArray(decodedGroupState.ZoneGroupState.ZoneGroups.ZoneGroup);
      return groups.map((g: any) => ZoneGroupTopologyService.ParseGroup(g));
    } else {
      return groupStateResponse.ZoneGroupState; // This should never happen, because it always is a string.
    }
  }

  private static ParseMember(member: any): ZoneMember {
    const uri = new URL(member.Location);
    return {
      name: member.ZoneName,
      uuid: member.UUID,
      host: uri.hostname,
      port: parseInt(uri.port, 10),
      Icon: member.Icon,
      MicEnabled: member.MicEnabled === 1,
      SoftwareVersion: member.SoftwareVersion,
      SwGen: member.SWGen,
    };
  }

  private static ParseGroup(group: any): ZoneGroup {
    const members: ZoneMember[] = ArrayHelper.ForceArray(group.ZoneGroupMember).map((m: any) => ZoneGroupTopologyService.ParseMember(m));
    const coordinator: ZoneMember | undefined = members.find((m) => m.uuid === group.Coordinator);

    if (coordinator === undefined) throw new Error('Error parsing ZoneGroup');

    let { name } = coordinator;
    if (members.length > 1) name += ` + ${members.length - 1}`;

    return {
      name,
      coordinator,
      members,
    };
  }

  protected ResolveEventPropertyValue(name: string, originalValue: any, type: string): any {
    const parsedValue = super.ResolveEventPropertyValue(name, originalValue, type);
    if (name === 'ZoneGroupState') {
      const groups = ArrayHelper.ForceArray(parsedValue.ZoneGroupState.ZoneGroups.ZoneGroup);
      return groups.map((g: any) => ZoneGroupTopologyService.ParseGroup(g));
    }

    return parsedValue;
  }
}
{{/if}}
{{/if}}